import pandas as pd
import os
import xml.etree.ElementTree as ET
import numpy as np
from bs4 import BeautifulSoup
import seaborn as sns
import statistics
import matplotlib.pyplot as plt
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import pylab as plt
import plotly.plotly as py
import plotly.graph_objs as go

#<failCount>5</failCount><passCount>42</passCount>

def reportParser():

    #tree = ET.parse('report1.xml')
    #root=tree.getroot()
    #print(root)

    infile1 = open("report1.xml", "r")
    infile2 = open("report2.xml", "r")
    infile3 = open("report3.xml", "r")
    infile4 = open("report4.xml", "r")

    def readfiles(xmlfilename):
        contents = xmlfilename.read()
        soup = BeautifulSoup(contents, 'xml')
        fail = soup.select_one('failCount')
        passed = soup.select_one('passCount')
        for totalfailures in fail:

            totalfailures=fail.get_text()
            print(totalfailures)
        for totalpassed in passed:
            totalpassed=passed.get_text()
            print(totalpassed)
            print(fail)
            print(passed)
            xmlfilename.close()
        return(totalfailures,totalpassed)

    #file 1
    fail1,pass1=readfiles(infile1)

    #print(fail1)
    #print(pass1)

    #file2
    fail2,pass2=readfiles(infile2)
    print(fail2)
    print(pass2)

    # file3
    fail3,pass3 = readfiles(infile3)
    print(pass3)
    print(fail3)

    # file4
    fail4,pass4 = readfiles(infile4)
    print(pass4)
    print(fail4)

    # create plot by group of pass and fail
    means_frank = (pass1,fail1,pass2,fail2,pass3,fail3,pass4,fail4)
    fig, ax = plt.subplots()

    # width of the bars
    barWidth = 0.2

    # Choose the passed
    bars1 = [pass1,pass2,pass3,pass4]
    # Choose the failures
    bars2 = [fail1,fail2,fail3,fail4]

    # The x position of bars
    r1 = np.arange(len(bars1))
    r2 = [x + barWidth for x in r1]

    # Create the plot
    plt.bar(r1, bars1,width=barWidth,color='red',edgecolor='white',capsize=7,label='Fail')
    # Create the plot
    plt.bar(r2, bars2,width=barWidth,color='green',edgecolor='white',capsize=7,label='Pass')

    # general layout
    plt.xticks([r + barWidth for r in range(len(bars1))],['CRT P1 run1', 'CRT P1 run2', 'CRT P1 run3','CRT P1 run4'])
    plt.ylabel('Tests')
    plt.legend()

    # Show graphic
    #plt.show()

    plt.savefig('graph1.png', bbox_inches='tight')
    plt.savefig('Reort1.pdf')
    plt.close()
    plt.clf()
    #compute the total of Passed and Failures for P1 CRT

    pass1=int(pass1)
    pass2=int(pass2)
    pass3=int(pass3)
    pass4=int(pass4)

    fail1=int(fail1)
    fail2=int(fail2)
    fail3=int(fail3)
    fail4=int(fail4)

    passset=[pass1,pass2,pass3,pass4]
    failset=[fail1,fail2,fail3,fail4]

    allpass=statistics.mean(passset)
    allfailed=statistics.mean(failset)

    print(allpass)
    print(allfailed)

    fig, ax = plt.subplots()

    # reportParser() with only failed and passed average

    #Barplot Example by Suite CRT P1 Passes
    plt.bar(["P1 Run1", "p1 Run2", "P1 Run3", "P1 Run4"], [pass1, pass2, pass3, pass4],color=['Yellow','Blue','Green','Tomato'])
    plt.grid(True)
    plt.title("P1 CRT Pass")
    #plt.show()
    for index, data in enumerate(passset):
        plt.text(x=index, y=data + 0.3, s=f"{data}", fontdict=dict(fontsize=10))

    plt.savefig('graph2.png')
    plt.savefig('Reort2.pdf')
    plt.close()
    plt.clf()
    #End of Bar Plot

    #plot Line grph
    # create data
    N = 4
    Passed = (pass1,pass2,pass3,pass4)
    Failed = (fail1,fail2,fail3,fail4)
    bars3=Passed + Failed


    ind = np.arange(N)  # the x locations for the groups
    width = 0.30  # the width of the bars: can also be len(x) sequence

    p1 = plt.bar(ind, Passed, width)
    p2 = plt.bar(ind, Failed, width)

    plt.ylabel('CRT P1 Pass VS Fail')
    plt.title('CRT P1 Pass VS Fail')
    plt.xticks(ind, ('P1Run1 ', 'P1Run2', 'Run3', 'Run4'))
    plt.yticks(np.arange(0, 81, 10))
    plt.legend((p1[0], p2[0]), ('Pass', 'Fail'))
    label=['pass=pass1,fail=fail1','pass=pass2,fail=fail2','pass=pass3,fail=fail3','pass=pass4,fail=fail4']

    # Text on the top of each barplot

    for index, data in enumerate(passset):
        plt.text(x=index, y=data + 1, s=f"{data}", fontdict=dict(fontsize=10))

    for index, data in enumerate(failset):
            plt.text(x=index+0.1, y=data +1, s=f"{data}", fontdict=dict(fontsize=10))

    plt.savefig('graph3.png')
    plt.savefig('Reort3.pdf')
    plt.close()
    plt.clf()


    #End of Bar Plot

    # plot Line grph
    # create data
    # Barplot Example by Suite CRT P1 Passes
    plt.bar(["P1 Run1", "p1 Run2", "P1 Run3", "P1 Run4"], [fail1, fail2,fail3,fail4],
            color=['Yellow', 'Blue', 'Green', 'Tomato'])
    plt.grid(True)
    plt.title("P1 CRT Failures")
    # plt.show()
    for index, data in enumerate(passset):
        plt.text(x=index, y=data + 0.2, s=f"{data}", fontdict=dict(fontsize=10))

    for index, data in enumerate(failset):
            plt.text(x=index+0.1, y=data +0.2, s=f"{data}", fontdict=dict(fontsize=10))


    #add a table to graph


    plt.savefig('graph4.png')
    plt.savefig('Reort4.pdf')
    plt.close()
    plt.clf()
    # End of Bar Plot


    #3D graph

    fig = plt.figure()
    ax = fig.gca(projection='3d')

    # Make data.
    X = Passed
    Y = Failed
    X, Y = np.meshgrid(X, Y)
    R = np.sqrt(X ** 2 + Y ** 2)
    Z = np.sin(R)

    # Plot the surface.
    surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,linewidth=0, antialiased=False)

    # Customize the z axis.
    ax.set_zlim(-1.01, 1.01)
    ax.zaxis.set_major_locator(LinearLocator(10))
    ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))

    # Add a color bar which maps values to colors.
    fig.colorbar(surf, shrink=0.5, aspect=5)


    plt.savefig('graph5.png')
    plt.savefig('Reort5.pdf')
    plt.close()
    plt.clf()

    #Writing data to table in graoh

